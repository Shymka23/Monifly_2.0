#!/usr/bin/env node

const fs = require("fs");
const path = require("path");

const LANGUAGES = ["en", "uk", "ru", "de", "es", "fr"];
const NAMESPACES = [
  "common",
  "dashboard",
  "budgeting",
  "financial-goals",
  "debts",
  "crypto",
  "investment",
  "auth",
  "settings",
];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–ª—é—á—ñ–≤ –∑ –æ–±'—î–∫—Ç–∞
function getAllKeys(obj, prefix = "") {
  let keys = [];

  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      const fullKey = prefix ? `${prefix}.${key}` : key;

      if (
        typeof obj[key] === "object" &&
        obj[key] !== null &&
        !Array.isArray(obj[key])
      ) {
        keys = keys.concat(getAllKeys(obj[key], fullKey));
      } else {
        keys.push(fullKey);
      }
    }
  }

  return keys;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
function validateTranslationStructure() {
  const errors = [];
  const warnings = [];
  const localesDir = path.join(process.cwd(), "public", "locales");

  console.log("üîç Validating translation structure...\n");

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ —ñ—Å–Ω—É—é—Ç—å
  for (const lang of LANGUAGES) {
    for (const ns of NAMESPACES) {
      const filePath = path.join(localesDir, lang, `${ns}.json`);

      if (!fs.existsSync(filePath)) {
        errors.push(`‚ùå Missing file: ${lang}/${ns}.json`);
        continue;
      }

      try {
        const content = JSON.parse(fs.readFileSync(filePath, "utf8"));

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ñ–∞–π–ª –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
        if (Object.keys(content).length === 0) {
          warnings.push(`‚ö†Ô∏è  Empty file: ${lang}/${ns}.json`);
        }

        console.log(
          `‚úÖ ${lang}/${ns}.json - ${
            Object.keys(content).length
          } top-level keys`
        );
      } catch (e) {
        errors.push(`‚ùå Invalid JSON: ${lang}/${ns}.json - ${e.message}`);
      }
    }
  }

  return { errors, warnings };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –∫–ª—é—á—ñ–≤ –º—ñ–∂ –º–æ–≤–∞–º–∏
function validateKeyConsistency() {
  const errors = [];
  const warnings = [];
  const localesDir = path.join(process.cwd(), "public", "locales");

  console.log("\nüîç Validating key consistency...\n");

  for (const ns of NAMESPACES) {
    const languageKeys = {};

    // –ó–±–∏—Ä–∞—î–º–æ –∫–ª—é—á—ñ –∑ —É—Å—ñ—Ö –º–æ–≤ –¥–ª—è —Ü—å–æ–≥–æ namespace
    for (const lang of LANGUAGES) {
      const filePath = path.join(localesDir, lang, `${ns}.json`);

      if (fs.existsSync(filePath)) {
        try {
          const content = JSON.parse(fs.readFileSync(filePath, "utf8"));
          languageKeys[lang] = new Set(getAllKeys(content));
        } catch (e) {
          // –í–∂–µ –æ–±—Ä–æ–±–∏–ª–∏ —Ü—é –ø–æ–º–∏–ª–∫—É –≤–∏—â–µ
          languageKeys[lang] = new Set();
        }
      } else {
        languageKeys[lang] = new Set();
      }
    }

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞–∑–æ–≤—É –º–æ–≤—É (–∞–Ω–≥–ª—ñ–π—Å—å–∫—É) –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    const baseKeys = languageKeys["en"] || new Set();

    if (baseKeys.size === 0) {
      warnings.push(`‚ö†Ô∏è  No base keys found for namespace: ${ns}`);
      continue;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –º–æ–≤—É
    for (const lang of LANGUAGES) {
      if (lang === "en") continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –±–∞–∑–æ–≤—É –º–æ–≤—É

      const currentKeys = languageKeys[lang];

      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–ª—é—á—ñ
      const missingKeys = [...baseKeys].filter(key => !currentKeys.has(key));
      if (missingKeys.length > 0) {
        errors.push(
          `‚ùå Missing keys in ${lang}/${ns}.json: ${missingKeys
            .slice(0, 5)
            .join(", ")}${
            missingKeys.length > 5
              ? `... (+${missingKeys.length - 5} more)`
              : ""
          }`
        );
      }

      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–π–≤—ñ –∫–ª—é—á—ñ
      const extraKeys = [...currentKeys].filter(key => !baseKeys.has(key));
      if (extraKeys.length > 0) {
        warnings.push(
          `‚ö†Ô∏è  Extra keys in ${lang}/${ns}.json: ${extraKeys
            .slice(0, 3)
            .join(", ")}${
            extraKeys.length > 3 ? `... (+${extraKeys.length - 3} more)` : ""
          }`
        );
      }

      if (missingKeys.length === 0 && extraKeys.length === 0) {
        console.log(`‚úÖ ${lang}/${ns}.json - All ${baseKeys.size} keys match`);
      }
    }
  }

  return { errors, warnings };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —è–∫–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
function validateTranslationQuality() {
  const warnings = [];
  const localesDir = path.join(process.cwd(), "public", "locales");

  console.log("\nüîç Validating translation quality...\n");

  for (const lang of LANGUAGES) {
    if (lang === "en") continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –±–∞–∑–æ–≤—É –º–æ–≤—É

    for (const ns of NAMESPACES) {
      const filePath = path.join(localesDir, lang, `${ns}.json`);

      if (fs.existsSync(filePath)) {
        try {
          const content = JSON.parse(fs.readFileSync(filePath, "utf8"));
          const allValues = getAllValues(content);

          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω–µ–ø–µ—Ä–µ–∫–ª–∞–µ–Ω—ñ —Ç–µ–∫—Å—Ç–∏ (–∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞ –≤ —ñ–Ω—à–∏—Ö –º–æ–≤–∞—Ö)
          const suspiciousValues = allValues.filter(value => {
            if (typeof value !== "string") return false;

            // –ü—Ä–æ—Å—Ç—ñ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –Ω–µ–ø–µ—Ä–µ–∫–ª–∞–µ–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤
            const englishWords = [
              "the",
              "and",
              "or",
              "but",
              "in",
              "on",
              "at",
              "to",
              "for",
              "of",
              "with",
              "by",
            ];
            const hasEnglishWords = englishWords.some(
              word =>
                value.toLowerCase().includes(` ${word} `) ||
                value.toLowerCase().startsWith(`${word} `) ||
                value.toLowerCase().endsWith(` ${word}`)
            );

            return hasEnglishWords;
          });

          if (suspiciousValues.length > 0) {
            warnings.push(
              `‚ö†Ô∏è  Potentially untranslated text in ${lang}/${ns}.json: "${
                suspiciousValues[0]
              }"${
                suspiciousValues.length > 1
                  ? ` (+${suspiciousValues.length - 1} more)`
                  : ""
              }`
            );
          } else {
            console.log(
              `‚úÖ ${lang}/${ns}.json - Translation quality looks good`
            );
          }
        } catch (e) {
          // –í–∂–µ –æ–±—Ä–æ–±–∏–ª–∏ —Ü—é –ø–æ–º–∏–ª–∫—É –≤–∏—â–µ
        }
      }
    }
  }

  return { warnings };
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
function getAllValues(obj) {
  let values = [];

  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      if (
        typeof obj[key] === "object" &&
        obj[key] !== null &&
        !Array.isArray(obj[key])
      ) {
        values = values.concat(getAllValues(obj[key]));
      } else {
        values.push(obj[key]);
      }
    }
  }

  return values;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É
function generateReport(structureResult, consistencyResult, qualityResult) {
  const allErrors = [...structureResult.errors, ...consistencyResult.errors];
  const allWarnings = [
    ...structureResult.warnings,
    ...consistencyResult.warnings,
    ...qualityResult.warnings,
  ];

  console.log("\nüìä VALIDATION REPORT\n");
  console.log("=".repeat(50));

  if (allErrors.length === 0 && allWarnings.length === 0) {
    console.log("üéâ All translations are valid and complete!");
    console.log(
      `‚úÖ Validated ${LANGUAGES.length} languages √ó ${
        NAMESPACES.length
      } namespaces = ${LANGUAGES.length * NAMESPACES.length} files`
    );
    return true;
  }

  if (allErrors.length > 0) {
    console.log(`\n‚ùå ERRORS (${allErrors.length}):`);
    allErrors.forEach(error => console.log(`  ${error}`));
  }

  if (allWarnings.length > 0) {
    console.log(`\n‚ö†Ô∏è  WARNINGS (${allWarnings.length}):`);
    allWarnings.forEach(warning => console.log(`  ${warning}`));
  }

  console.log(`\nüìà SUMMARY:`);
  console.log(`  Languages: ${LANGUAGES.join(", ")}`);
  console.log(`  Namespaces: ${NAMESPACES.join(", ")}`);
  console.log(`  Total files: ${LANGUAGES.length * NAMESPACES.length}`);
  console.log(`  Errors: ${allErrors.length}`);
  console.log(`  Warnings: ${allWarnings.length}`);

  return allErrors.length === 0;
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
function main() {
  console.log("üåç TRANSLATION VALIDATION");
  console.log("=".repeat(50));

  const structureResult = validateTranslationStructure();
  const consistencyResult = validateKeyConsistency();
  const qualityResult = validateTranslationQuality();

  const isValid = generateReport(
    structureResult,
    consistencyResult,
    qualityResult
  );

  process.exit(isValid ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —è–∫—â–æ —Ü–µ –æ—Å–Ω–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å
if (require.main === module) {
  main();
}

module.exports = {
  validateTranslationStructure,
  validateKeyConsistency,
  validateTranslationQuality,
};
